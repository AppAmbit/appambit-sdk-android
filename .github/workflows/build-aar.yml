name: Android CI/CD Library

on:
  workflow_dispatch:

env:
  PACKAGE_NAME: appambit-sdk
  BUILD_PATH: build/outputs/aar/appambit-sdk-release.aar

permissions:
  contents: write

jobs:
  build:
    name: Build Android Library with Version
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Read version from gradle.properties
        id: version
        run: |
          VERSION_NAME=$(grep "^VERSION_NAME=" gradle.properties | cut -d'=' -f2)
          VERSION_CODE=$(grep "^VERSION_CODE=" gradle.properties | cut -d'=' -f2)
          
          echo "VERSION_NAME=$VERSION_NAME"
          echo "VERSION_CODE=$VERSION_CODE"
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "new_tag=v$VERSION_NAME" >> $GITHUB_OUTPUT
          
          if [[ "$VERSION_NAME" == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG=${{ steps.version.outputs.new_tag }}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping build and publish."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if tag exists
        if: steps.check_tag.outputs.skip_build == 'true'
        run: |
          echo "Build skipped because version tag already exists."
          exit 0

      - name: Extract latest changelog entry
        id: changelog
        run: |
          LATEST_CHANGELOG=$(awk '/^## Version /{if (p) exit; p=1} p' CHANGELOG.md | sed '1d')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show changelog
        run: |
          echo "Last changes:"
          echo "${{ steps.changelog.outputs.changelog }}"

      - name: Clean project
        run: ./gradlew clean

      - name: Build with Gradle
        run: ./gradlew :${{ env.PACKAGE_NAME }}:assembleRelease

      - name: Import GPG key
        run: |
          echo "${{ secrets.OSS_SIGNING_KEY }}" | gpg --batch --import

      - name: Rename AAR with version
        run: |
          mkdir -p artifacts
          cp ${{ env.PACKAGE_NAME }}/${{ env.BUILD_PATH }} artifacts/${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version_name }}.aar

      - name: Upload AAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version_name }}
          path: artifacts/${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version_name }}.aar

      - name: Create GitHub Release
        #      if: ${{ github.ref_name == 'main' || github.ref_name == 'master' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: ${{ steps.version.outputs.new_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: artifacts/${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version_name }}.aar
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ steps.version.outputs.is_prerelease }}

      - name: Publish to Maven Central (MavenCentral via Sonatype)
        if: steps.version.outputs.is_prerelease == 'false'
        run: ./gradlew :${{ env.PACKAGE_NAME }}:publishAllPublicationsToMavenRepository --info --stacktrace
        env:
          OSS_SIGNING_KEY: ${{ secrets.OSS_SIGNING_KEY }}
          OSS_SIGNING_PASSWORD: ${{ secrets.OSS_SIGNING_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}